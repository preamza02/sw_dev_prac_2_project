/* tslint:disable */
/* eslint-disable */
/**
 * Hotel Booking and Authentication API
 * API for managing hotels, bookings, and user authentication
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AuthResponse,
  BadRequest400Response,
  GetMeResponse,
  LoginUserRequest,
  LogoutResponse,
  RegisterUserRequest,
  Unauthorized401Response,
} from '../models/index';
import {
  AuthResponseFromJSON,
  AuthResponseToJSON,
  BadRequest400ResponseFromJSON,
  BadRequest400ResponseToJSON,
  GetMeResponseFromJSON,
  GetMeResponseToJSON,
  LoginUserRequestFromJSON,
  LoginUserRequestToJSON,
  LogoutResponseFromJSON,
  LogoutResponseToJSON,
  RegisterUserRequestFromJSON,
  RegisterUserRequestToJSON,
  Unauthorized401ResponseFromJSON,
  Unauthorized401ResponseToJSON,
} from '../models/index';

export interface AuthLoginPostRequest {
  loginUserRequest: LoginUserRequest;
}

export interface AuthRegisterPostRequest {
  registerUserRequest: RegisterUserRequest;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   * Log in an existing user
   */
  async authLoginPostRaw(
    requestParameters: AuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthResponse>> {
    if (requestParameters['loginUserRequest'] == null) {
      throw new runtime.RequiredError(
        'loginUserRequest',
        'Required parameter "loginUserRequest" was null or undefined when calling authLoginPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginUserRequestToJSON(requestParameters['loginUserRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
  }

  /**
   * Log in an existing user
   */
  async authLoginPost(
    requestParameters: AuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthResponse> {
    const response = await this.authLoginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Log out the current user
   */
  async authLogoutGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LogoutResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/logout`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => LogoutResponseFromJSON(jsonValue));
  }

  /**
   * Log out the current user
   */
  async authLogoutGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LogoutResponse> {
    const response = await this.authLogoutGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the current logged-in user
   */
  async authMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
    token?: string,
  ): Promise<runtime.ApiResponse<GetMeResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};
    headerParameters['Authorization'] = `Bearer ${token}`;

    // if (this.configuration && this.configuration.accessToken) {
    //   const token = this.configuration.accessToken;
    //   const tokenString = await token('bearerAuth', []);

    //   if (tokenString) {
    //     headerParameters['Authorization'] = `Bearer ${token}`;
    //   }
    // }
    const response = await this.request(
      {
        path: `/auth/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GetMeResponseFromJSON(jsonValue));
  }

  /**
   * Get the current logged-in user
   */
  async authMeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
    token?: string,
  ): Promise<GetMeResponse> {
    const response = await this.authMeGetRaw(initOverrides, token);
    return await response.value();
  }

  /**
   * Register a new user
   */
  async authRegisterPostRaw(
    requestParameters: AuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthResponse>> {
    if (requestParameters['registerUserRequest'] == null) {
      throw new runtime.RequiredError(
        'registerUserRequest',
        'Required parameter "registerUserRequest" was null or undefined when calling authRegisterPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/register`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterUserRequestToJSON(requestParameters['registerUserRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
  }

  /**
   * Register a new user
   */
  async authRegisterPost(
    requestParameters: AuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthResponse> {
    const response = await this.authRegisterPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

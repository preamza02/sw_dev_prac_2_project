/* tslint:disable */
/* eslint-disable */
/**
 * Hotel Booking and Authentication API
 * API for managing hotels, bookings, and user authentication
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  BadRequest400Response,
  CreateHotel201Response,
  DeleteHotel200Response,
  GetHotelById200Response,
  GetHotels200Response,
  Hotel,
  UpdateHotel200Response,
} from '../models/index';
import {
  BadRequest400ResponseFromJSON,
  BadRequest400ResponseToJSON,
  CreateHotel201ResponseFromJSON,
  CreateHotel201ResponseToJSON,
  DeleteHotel200ResponseFromJSON,
  DeleteHotel200ResponseToJSON,
  GetHotelById200ResponseFromJSON,
  GetHotelById200ResponseToJSON,
  GetHotels200ResponseFromJSON,
  GetHotels200ResponseToJSON,
  HotelFromJSON,
  HotelToJSON,
  UpdateHotel200ResponseFromJSON,
  UpdateHotel200ResponseToJSON,
} from '../models/index';

export interface HotelsGetRequest {
  select?: string;
  sort?: string;
  page?: number;
  limit?: number;
}

export interface HotelsIdDeleteRequest {
  id: string;
}

export interface HotelsIdGetRequest {
  id: string;
}

export interface HotelsIdPutRequest {
  id: string;
  hotel: Hotel;
}

export interface HotelsPostRequest {
  hotel: Hotel;
}

/**
 *
 */
export class HotelsApi extends runtime.BaseAPI {
  /**
   * Get all hotels
   */
  async hotelsGetRaw(
    requestParameters: HotelsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetHotels200Response>> {
    const queryParameters: any = {};

    if (requestParameters['select'] != null) {
      queryParameters['select'] = requestParameters['select'];
    }

    if (requestParameters['sort'] != null) {
      queryParameters['sort'] = requestParameters['sort'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/hotels`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetHotels200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get all hotels
   */
  async hotelsGet(
    requestParameters: HotelsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetHotels200Response> {
    const response = await this.hotelsGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a single hotel
   */
  async hotelsIdDeleteRaw(
    requestParameters: HotelsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteHotel200Response>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling hotelsIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/hotels/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteHotel200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Delete a single hotel
   */
  async hotelsIdDelete(
    requestParameters: HotelsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteHotel200Response> {
    const response = await this.hotelsIdDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the hotel by id
   */
  async hotelsIdGetRaw(
    requestParameters: HotelsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetHotelById200Response>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling hotelsIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/hotels/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetHotelById200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the hotel by id
   */
  async hotelsIdGet(
    requestParameters: HotelsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetHotelById200Response> {
    const response = await this.hotelsIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a single hotel
   */
  async hotelsIdPutRaw(
    requestParameters: HotelsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateHotel200Response>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling hotelsIdPut().',
      );
    }

    if (requestParameters['hotel'] == null) {
      throw new runtime.RequiredError(
        'hotel',
        'Required parameter "hotel" was null or undefined when calling hotelsIdPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/hotels/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: HotelToJSON(requestParameters['hotel']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateHotel200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update a single hotel
   */
  async hotelsIdPut(
    requestParameters: HotelsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateHotel200Response> {
    const response = await this.hotelsIdPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create a new hotel
   */
  async hotelsPostRaw(
    requestParameters: HotelsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateHotel201Response>> {
    if (requestParameters['hotel'] == null) {
      throw new runtime.RequiredError(
        'hotel',
        'Required parameter "hotel" was null or undefined when calling hotelsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/hotels`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: HotelToJSON(requestParameters['hotel']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateHotel201ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create a new hotel
   */
  async hotelsPost(
    requestParameters: HotelsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateHotel201Response> {
    const response = await this.hotelsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

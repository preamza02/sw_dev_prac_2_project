/* tslint:disable */
/* eslint-disable */
/**
 * Library API
 * Hotel Booking API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Hotel,
} from '../models/index';
import {
    HotelFromJSON,
    HotelToJSON,
} from '../models/index';

export interface HotelsIdDeleteRequest {
    id: string;
}

export interface HotelsIdGetRequest {
    id: string;
}

export interface HotelsIdPutRequest {
    id: string;
    hotel: Hotel;
}

export interface HotelsPostRequest {
    hotel: Hotel;
}

/**
 * 
 */
export class HotelsApi extends runtime.BaseAPI {

    /**
     * Returns the list of all the hotels
     */
    async hotelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Hotel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hotels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HotelFromJSON));
    }

    /**
     * Returns the list of all the hotels
     */
    async hotelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Hotel>> {
        const response = await this.hotelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete the hotel by id
     */
    async hotelsIdDeleteRaw(requestParameters: HotelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hotel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling hotelsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/hotels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelFromJSON(jsonValue));
    }

    /**
     * Delete the hotel by id
     */
    async hotelsIdDelete(requestParameters: HotelsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hotel> {
        const response = await this.hotelsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the hotel by id
     */
    async hotelsIdGetRaw(requestParameters: HotelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hotel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling hotelsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hotels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelFromJSON(jsonValue));
    }

    /**
     * Get the hotel by id
     */
    async hotelsIdGet(requestParameters: HotelsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hotel> {
        const response = await this.hotelsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the hotel by id
     */
    async hotelsIdPutRaw(requestParameters: HotelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hotel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling hotelsIdPut().'
            );
        }

        if (requestParameters['hotel'] == null) {
            throw new runtime.RequiredError(
                'hotel',
                'Required parameter "hotel" was null or undefined when calling hotelsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/hotels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelToJSON(requestParameters['hotel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelFromJSON(jsonValue));
    }

    /**
     * Update the hotel by id
     */
    async hotelsIdPut(requestParameters: HotelsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hotel> {
        const response = await this.hotelsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new hotel
     */
    async hotelsPostRaw(requestParameters: HotelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Hotel>> {
        if (requestParameters['hotel'] == null) {
            throw new runtime.RequiredError(
                'hotel',
                'Required parameter "hotel" was null or undefined when calling hotelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/hotels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelToJSON(requestParameters['hotel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelFromJSON(jsonValue));
    }

    /**
     * Create a new hotel
     */
    async hotelsPost(requestParameters: HotelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Hotel> {
        const response = await this.hotelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

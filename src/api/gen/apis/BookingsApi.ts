/* tslint:disable */
/* eslint-disable */
/**
 * Library API
 * Hotel Booking API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Booking,
  BookingBody,
} from '../models/index';
import {
    BookingFromJSON,
    BookingToJSON,
    BookingBodyFromJSON,
    BookingBodyToJSON,
} from '../models/index';

export interface BookingsGetRequest {
    hotelId?: string;
}

export interface BookingsIdDeleteRequest {
    id: string;
}

export interface BookingsIdGetRequest {
    id: string;
}

export interface BookingsIdPutRequest {
    id: string;
    bookingBody: BookingBody;
}

export interface HotelsHotelIdBookingsPostRequest {
    hotelId: string;
    bookingBody: BookingBody;
}

/**
 * 
 */
export class BookingsApi extends runtime.BaseAPI {

    /**
     * Returns the list of all the bookings
     */
    async bookingsGetRaw(requestParameters: BookingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Booking>>> {
        const queryParameters: any = {};

        if (requestParameters['hotelId'] != null) {
            queryParameters['hotelId'] = requestParameters['hotelId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingFromJSON));
    }

    /**
     * Returns the list of all the bookings
     */
    async bookingsGet(requestParameters: BookingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Booking>> {
        const response = await this.bookingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the booking by id
     */
    async bookingsIdDeleteRaw(requestParameters: BookingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Delete the booking by id
     */
    async bookingsIdDelete(requestParameters: BookingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.bookingsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the booking by id
     */
    async bookingsIdGetRaw(requestParameters: BookingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Get the booking by id
     */
    async bookingsIdGet(requestParameters: BookingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.bookingsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the booking by id
     */
    async bookingsIdPutRaw(requestParameters: BookingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdPut().'
            );
        }

        if (requestParameters['bookingBody'] == null) {
            throw new runtime.RequiredError(
                'bookingBody',
                'Required parameter "bookingBody" was null or undefined when calling bookingsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookingBodyToJSON(requestParameters['bookingBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Update the booking by id
     */
    async bookingsIdPut(requestParameters: BookingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.bookingsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Booking for the hotel specified by hotel id
     */
    async hotelsHotelIdBookingsPostRaw(requestParameters: HotelsHotelIdBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters['hotelId'] == null) {
            throw new runtime.RequiredError(
                'hotelId',
                'Required parameter "hotelId" was null or undefined when calling hotelsHotelIdBookingsPost().'
            );
        }

        if (requestParameters['bookingBody'] == null) {
            throw new runtime.RequiredError(
                'bookingBody',
                'Required parameter "bookingBody" was null or undefined when calling hotelsHotelIdBookingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bookings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters['hotelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookingBodyToJSON(requestParameters['bookingBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Create a new Booking for the hotel specified by hotel id
     */
    async hotelsHotelIdBookingsPost(requestParameters: HotelsHotelIdBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.hotelsHotelIdBookingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

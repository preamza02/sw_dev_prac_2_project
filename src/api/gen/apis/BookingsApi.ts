/* tslint:disable */
/* eslint-disable */
/**
 * Hotel Booking and Authentication API
 * API for managing hotels, bookings, and user authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBookingRequest,
  BadRequest400Response,
  CreateBooking200Response,
  DeleteBooking200Response,
  GetBookingById200Response,
  GetBookings200Response,
  NotFound404Response,
  ServerError500Response,
  Unauthorized401Response,
  UpdateBooking200Response,
  UpdateBookingRequest,
} from '../models/index';
import {
    AddBookingRequestFromJSON,
    AddBookingRequestToJSON,
    BadRequest400ResponseFromJSON,
    BadRequest400ResponseToJSON,
    CreateBooking200ResponseFromJSON,
    CreateBooking200ResponseToJSON,
    DeleteBooking200ResponseFromJSON,
    DeleteBooking200ResponseToJSON,
    GetBookingById200ResponseFromJSON,
    GetBookingById200ResponseToJSON,
    GetBookings200ResponseFromJSON,
    GetBookings200ResponseToJSON,
    NotFound404ResponseFromJSON,
    NotFound404ResponseToJSON,
    ServerError500ResponseFromJSON,
    ServerError500ResponseToJSON,
    Unauthorized401ResponseFromJSON,
    Unauthorized401ResponseToJSON,
    UpdateBooking200ResponseFromJSON,
    UpdateBooking200ResponseToJSON,
    UpdateBookingRequestFromJSON,
    UpdateBookingRequestToJSON,
} from '../models/index';

export interface BookingsGetRequest {
    hotelId?: string;
}

export interface BookingsIdDeleteRequest {
    id: string;
}

export interface BookingsIdGetRequest {
    id: string;
}

export interface BookingsIdPutRequest {
    id: string;
    updateBookingRequest: UpdateBookingRequest;
}

export interface HotelsHotelIdBookingsPostRequest {
    hotelId: string;
    addBookingRequest: AddBookingRequest;
}

/**
 * 
 */
export class BookingsApi extends runtime.BaseAPI {

    /**
     * Get all bookings
     */
    async bookingsGetRaw(requestParameters: BookingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookings200Response>> {
        const queryParameters: any = {};

        if (requestParameters['hotelId'] != null) {
            queryParameters['hotelId'] = requestParameters['hotelId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookings200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all bookings
     */
    async bookingsGet(requestParameters: BookingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookings200Response> {
        const response = await this.bookingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a booking
     */
    async bookingsIdDeleteRaw(requestParameters: BookingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteBooking200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteBooking200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a booking
     */
    async bookingsIdDelete(requestParameters: BookingsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteBooking200Response> {
        const response = await this.bookingsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single booking by id
     */
    async bookingsIdGetRaw(requestParameters: BookingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookingById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookingById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single booking by id
     */
    async bookingsIdGet(requestParameters: BookingsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookingById200Response> {
        const response = await this.bookingsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a booking
     */
    async bookingsIdPutRaw(requestParameters: BookingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBooking200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookingsIdPut().'
            );
        }

        if (requestParameters['updateBookingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBookingRequest',
                'Required parameter "updateBookingRequest" was null or undefined when calling bookingsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBookingRequestToJSON(requestParameters['updateBookingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateBooking200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a booking
     */
    async bookingsIdPut(requestParameters: BookingsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBooking200Response> {
        const response = await this.bookingsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a booking for a hotel
     */
    async hotelsHotelIdBookingsPostRaw(requestParameters: HotelsHotelIdBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBooking200Response>> {
        if (requestParameters['hotelId'] == null) {
            throw new runtime.RequiredError(
                'hotelId',
                'Required parameter "hotelId" was null or undefined when calling hotelsHotelIdBookingsPost().'
            );
        }

        if (requestParameters['addBookingRequest'] == null) {
            throw new runtime.RequiredError(
                'addBookingRequest',
                'Required parameter "addBookingRequest" was null or undefined when calling hotelsHotelIdBookingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hotels/{hotelId}/bookings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters['hotelId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBookingRequestToJSON(requestParameters['addBookingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBooking200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a booking for a hotel
     */
    async hotelsHotelIdBookingsPost(requestParameters: HotelsHotelIdBookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBooking200Response> {
        const response = await this.hotelsHotelIdBookingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
